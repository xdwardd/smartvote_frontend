{
  "version": 3,
  "sources": ["../../daisyui/components/toast/object.js", "../../daisyui/functions/addPrefix.js", "../../daisyui/components/toast/index.js"],
  "sourcesContent": ["export default {\".toast\":{\"position\":\"fixed\",\"inset-inline-start\":\"auto\",\"inset-inline-end\":\"calc(0.25rem * 4)\",\"top\":\"auto\",\"bottom\":\"calc(0.25rem * 4)\",\"display\":\"flex\",\"flex-direction\":\"column\",\"gap\":\"calc(0.25rem * 2)\",\"background-color\":\"transparent\",\"translate\":\"var(--toast-x, 0) var(--toast-y, 0)\",\"width\":\"max-content\",\"max-width\":\"calc(100vw - 2rem)\",\"& > *\":{\"animation\":\"toast 0.25s ease-out\"},\"&:where(.toast-start)\":{\"inset-inline-start\":\"calc(0.25rem * 4)\",\"inset-inline-end\":\"auto\",\"--toast-x\":\"0\"},\"&:where(.toast-center)\":{\"inset-inline-start\":\"calc(1/2 * 100%)\",\"inset-inline-end\":\"calc(1/2 * 100%)\",\"--toast-x\":\"-50%\"},\"&:where(.toast-end)\":{\"inset-inline-start\":\"auto\",\"inset-inline-end\":\"calc(0.25rem * 4)\",\"--toast-x\":\"0\"},\"&:where(.toast-bottom)\":{\"top\":\"auto\",\"bottom\":\"calc(0.25rem * 4)\",\"--toast-y\":\"0\"},\"&:where(.toast-middle)\":{\"top\":\"calc(1/2 * 100%)\",\"bottom\":\"auto\",\"--toast-y\":\"-50%\"},\"&:where(.toast-top)\":{\"top\":\"calc(0.25rem * 4)\",\"bottom\":\"auto\",\"--toast-y\":\"0\"}},\"@keyframes toast\":{\"0%\":{\"scale\":\"0.9\",\"opacity\":0},\"100%\":{\"scale\":\"1\",\"opacity\":1}}};", "const defaultExcludedPrefixes = [\"color-\", \"size-\", \"radius-\", \"border\", \"depth\", \"noise\"]\n\nconst shouldExcludeVariable = (variableName, excludedPrefixes) => {\n  if (variableName.startsWith(\"tw\")) {\n    return true\n  }\n  return excludedPrefixes.some((excludedPrefix) => variableName.startsWith(excludedPrefix))\n}\n\nconst prefixVariable = (variableName, prefix, excludedPrefixes) => {\n  if (shouldExcludeVariable(variableName, excludedPrefixes)) {\n    return variableName\n  }\n  return `${prefix}${variableName}`\n}\n\nconst getPrefixedSelector = (selector, prefix) => {\n  if (!selector.startsWith(\".\")) return selector\n  return `.${prefix}${selector.slice(1)}`\n}\n\nconst getPrefixedKey = (key, prefix, excludedPrefixes) => {\n  const prefixAmpDot = prefix ? `&.${prefix}` : \"\"\n\n  if (!prefix) return key\n\n  if (key.startsWith(\"--\")) {\n    const variableName = key.slice(2)\n    return `--${prefixVariable(variableName, prefix, excludedPrefixes)}`\n  }\n\n  if (key.startsWith(\"@\") || key.startsWith(\"[\")) {\n    return key\n  }\n\n  if (key.startsWith(\"&\")) {\n    // If it's a complex selector with :not(), :has(), etc.\n    if (key.match(/:[a-z-]+\\(/)) {\n      return key.replace(/\\.([\\w-]+)/g, `.${prefix}$1`)\n    }\n    // For simple &. cases\n    if (key.startsWith(\"&.\")) {\n      return `${prefixAmpDot}${key.slice(2)}`\n    }\n    // For other & cases (like &:hover or &:not(...))\n    return key.replace(/\\.([\\w-]+)/g, `.${prefix}$1`)\n  }\n\n  if (key.startsWith(\":\")) {\n    return key.replace(/\\.([\\w-]+)/g, `.${prefix}$1`)\n  }\n\n  if (\n    key.includes(\".\") &&\n    !key.includes(\" \") &&\n    !key.includes(\">\") &&\n    !key.includes(\"+\") &&\n    !key.includes(\"~\")\n  ) {\n    return key\n      .split(\".\")\n      .filter(Boolean)\n      .map((part) => prefix + part)\n      .join(\".\")\n      .replace(/^/, \".\")\n  }\n\n  if (key.includes(\">\") || key.includes(\"+\") || key.includes(\"~\")) {\n    // For comma-separated selectors\n    if (key.includes(\",\")) {\n      return key\n        .split(/\\s*,\\s*/)\n        .map((part) => {\n          // Replace class names with prefixed versions for each part\n          return part.replace(/\\.([\\w-]+)/g, `.${prefix}$1`)\n        })\n        .join(\", \")\n    }\n\n    // For simple combinators (not comma-separated)\n    let processedKey = key.replace(/\\.([\\w-]+)/g, `.${prefix}$1`)\n\n    // Add a space before combinators at the beginning\n    if (\n      processedKey.startsWith(\">\") ||\n      processedKey.startsWith(\"+\") ||\n      processedKey.startsWith(\"~\")\n    ) {\n      processedKey = ` ${processedKey}`\n    }\n\n    return processedKey\n  }\n\n  if (key.includes(\" \")) {\n    return key\n      .split(/\\s+/)\n      .map((part) => {\n        if (part.startsWith(\".\")) {\n          return getPrefixedSelector(part, prefix)\n        }\n        return part\n      })\n      .join(\" \")\n  }\n\n  if (key.includes(\":\")) {\n    const [selector, ...pseudo] = key.split(\":\")\n    if (selector.startsWith(\".\")) {\n      return `${getPrefixedSelector(selector, prefix)}:${pseudo.join(\":\")}`\n    }\n    return key.replace(/\\.([\\w-]+)/g, `.${prefix}$1`)\n  }\n\n  if (key.startsWith(\".\")) {\n    return getPrefixedSelector(key, prefix)\n  }\n\n  return key\n}\n\nconst processArrayValue = (value, prefix, excludedPrefixes) => {\n  return value.map((item) => {\n    if (typeof item === \"string\") {\n      if (item.startsWith(\".\")) {\n        return prefix ? `.${prefix}${item.slice(1)}` : item\n      }\n      return processStringValue(item, prefix, excludedPrefixes)\n    }\n    return item\n  })\n}\n\nconst processStringValue = (value, prefix, excludedPrefixes) => {\n  if (prefix === 0) return value\n  return value.replace(/var\\(--([^)]+)\\)/g, (match, variableName) => {\n    if (shouldExcludeVariable(variableName, excludedPrefixes)) {\n      return match\n    }\n    return `var(--${prefix}${variableName})`\n  })\n}\n\nconst processValue = (value, prefix, excludedPrefixes) => {\n  if (Array.isArray(value)) {\n    return processArrayValue(value, prefix, excludedPrefixes)\n  } else if (typeof value === \"object\" && value !== null) {\n    return addPrefix(value, prefix, excludedPrefixes)\n  } else if (typeof value === \"string\") {\n    return processStringValue(value, prefix, excludedPrefixes)\n  } else {\n    return value\n  }\n}\n\nexport const addPrefix = (obj, prefix, excludedPrefixes = defaultExcludedPrefixes) => {\n  return Object.entries(obj).reduce((result, [key, value]) => {\n    const newKey = getPrefixedKey(key, prefix, excludedPrefixes)\n    result[newKey] = processValue(value, prefix, excludedPrefixes)\n    return result\n  }, {})\n}\n", "import toast from './object.js';\nimport { addPrefix } from '../../functions/addPrefix.js';\n\nexport default ({ addComponents, prefix = '' }) => {\n  const prefixedtoast = addPrefix(toast, prefix);\n  addComponents({ ...prefixedtoast });\n};\n"],
  "mappings": "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",
  "names": []
}
